**dff**


** Pedestrian Navigation Algorithm (PNA): A Mathematical Expression

1.	Phase I: The K-Shortest Paths Calculation
First, the algorithm finds the k-shortest paths between A and B. The general idea is to find the shortest path, then progressively find paths with increasing weight that are not dominated by already found paths.

1.1.	Graph Representation
• G = (V, E): A directed graph with a set of vertices V and a set of edges E.
• w(u, v): The weight (or cost) associated with the edge (u, v) ∈ E.

1.2.	Problem Definition
Given:
• Graph G = (V, E) with edge weights w(u, v)
• Source vertex s ∈ V
• Destination vertex t ∈ V
• Integer k > 0
Find:
• KSP(s, t, k) = {p1, p2, ..., pk}: A set containing the k-shortest paths from s to t in G, ordered by increasing path weight.
d(p): The weight of a path p = (s, v1, v2, ..., t) is defined as the sum of the edge weights:
  * d(p) = ∑ w(vi, vi+1), for 0 ≤ i ≤ |p|-2, where v0 = s and v|p|-1 = t

1.3.	General Algorithm
• Initialization:
  * Find the shortest path p1 from s to t using Dijkstra's algorithm.
  * Set KSP(s, t, k) = {p1}
  * Set i = 1
• Iteration:
  * For i = 1 to k-1:
    * Find candidate paths: Generate candidate paths by considering each edge e in the current shortest path pi. For each edge e = (u, v), create a new path by removing e and finding the shortest path from v to t that doesn't use any edges from the previous paths (p1, p2, ..., pi).
    * Filter candidates: Remove candidate paths that are dominated by paths already in KSP(s, t, k).
    * Select next shortest: Choose the candidate path with the smallest weight that is not dominated and add it to KSP(s, t, k) as pi+1.

1.4.	Mathematical Expressions
• Dominance: A path p' is dominated by path p if it has the same starting and ending nodes, but p' has a higher weight and also contains all the edges of p.
• Candidate Path Generation:
  * For each edge e = (u, v) in path pi:
    * Let sp = pi - e (the spur path without e)
    * Let p' = shortest path from v to t, excluding edges in (p1, p2, ..., pi).
    * Candidate path p = sp + p'
• Filtering: Remove candidate paths where a path p exists in KSP(s, t, k) such that d(p) ≤ d(p') and p contains all the edges of p'.

1.5.	Example
Consider a graph with nodes A, B, C, D, and edges:
• AB: weight 1
• AC: weight 2
• BC: weight 1
• BD: weight 2
• CD: weight 1

Let s = A, t = D, and k = 3.
1. Shortest Path: p1 = AB, BD (weight 3)
2. Candidate Paths:
  * Remove AB: p2 = AC, CD (weight 3)
  * Remove BD: p3 = AB, BC, CD (weight 4)
3. Filtering: None
4. Next Shortest: p2 is chosen since its weight is equal to p1's but it's not dominated.
5. Candidate Paths (second iteration):
  * Remove AC: p4 = AB, BC, CD (already found)
  * Remove CD: p5 = AC, BD (weight 4)
6. Filtering: None
7. Next Shortest: p5 is chosen since it's not dominated and its weight is greater than p2's.
Therefore, KSP(A, D, 3) = {AB, BD, AC, CD, AC, BD}.

2.	Phase II: Attributes Retrieval and Presentation

2.1.	Attributes Retrieval
The stored navigation information (e.g., presence of sidewalk, greenery, missing curb ramps, etc.) corresponding to each segment in the “shortest” and “alternative” paths are retrieved from the tables as key-value pairs.

2.2.	Display
The geometry of the “shortest” and “alternative” paths and their comprehensive navigation attributes are symbolized and presented to the users.
